#!/usr/bin/env bash

optVerbose=0
tldRegex='\.(com|org|net|cc)(/.+)?$'
mediaUrlRegex='\.(m3u|mp\d|pls)$'

# could cache $openy somewhere for a little performance boost
if [ -n "$SSH_CLIENT" ] && ( type vim >/dev/null 2>&1)
then
	# TODO make vim open in tabs with -p instead of making multiple calls
	# try adding all found paths to a var
	# then running that var through xargs -o to openy program
	openy="xargs -d \n -o vim"
elif ( type explorer >/dev/null 2>&1)
then
	openy=explorer
elif ( type termux-share >/dev/null 2>&1)
then
	openy="termux-share -d"
elif ( type xdg-open >/dev/null 2>&1)
then
	openy=xdg-open
else
	echo 'cannot find a program to open with'
	exit 1
fi

if ( type vlc >/dev/null 2>&1)
then
	mediaOpeny=vlc
else
	mediaOpeny="$openy"
fi

# add pipe args to the list of regular args
args="$@"
[[ -p /dev/stdin ]] && { mapfile -t; set -- "${MAPFILE[@]}"; set -- "$@" "$args"; }

log=()

# iterate over args
for i in "$@"
do
	if [[ -z $i ]]
	then
		continue
	fi

	if [[ "$optVerbose" == 1 ]]
	then
		echo "input: $i"
	fi

	# could be a path, could be a url
	absolutepath="$i"
	absolutepath="$(realpath --no-symlinks --quiet "$absolutepath")"

	url="$(echo "$i" | grep -iPo '^https?://.+$')"

	# if file doesn't exist, tweak paths
	if [[ ! -f "$absolutepath" ]]
	then
		# grep results: remove everything after ":"
		if echo "$absolutepath" | grep -iq ':'
		then
			absolutepath="$(echo "$i" | grep -iPo '^.{2}[^:]+')"
		# git short status results
		else
			# strip bash color codes
			# then strip git status indicators and quotes
			absolutepath="$(echo "$i" | perl -p -e 's/\e\[\d{0,2}m//g;' -e 's/^[ MTADRCU\?\!]{2} "?(.+?)"?$/$1/g;')"
		fi

		absolutepath="$(realpath --no-symlinks --quiet "$absolutepath")"
	fi

	# skip dupes
	# makes this function play nice with grep results
	# need to check log after formatting paths or else it doesn't work on grep results
	if [[ -n "$url" && " ${log[*]} " =~ " $url" ]]
	then
		if [[ "$optVerbose" == 1 ]]
		then
			echo "skipping dupe"
		fi
		continue
	elif [[ -n "$absolutepath" && " ${log[*]} " =~ " $absolutepath " ]]
	then
		if [[ "$optVerbose" == 1 ]]
		then
			echo "skipping dupe"
		fi
		continue
	fi

	if [[ -n "$url" ]]
	then
		# skip the following file checks
		:
	elif [[ -f "$absolutepath" ]]
	then
		foldername=$(dirname -- "$absolutepath")
		filename=$(basename -- "$absolutepath")
	elif [[ -d "$absolutepath" ]]
	then
		foldername="$absolutepath"
		filename="."
	else
		if echo "$i" | grep -Piq "$tldRegex"
		then
			url="https://$i"
		else
			echo "could not find ${absolutepath}"
			continue
		fi
	fi

	if [[ "$optVerbose" == 1 ]]
	then
		echo "filename: $filename"
		echo "absolutepath: $absolutepath"
		echo "url: $url"
	fi

	if [[ -n "$url" ]]
	then
		# support for directly opening streaming urls in a media player if possible
		if echo "$url" | grep -Piq "$mediaUrlRegex"
		then
			if [[ "$optVerbose" == 1 ]]
			then
				echo "opening media url"
			fi

			($mediaOpeny "$url")
		else
			if [[ "$optVerbose" == 1 ]]
			then
				echo "opening regular url"
			fi

			($openy "$url")
		fi

		log+=("$url")
	else
		if [[ "$optVerbose" == 1 ]]
		then
			echo "opening path"
		fi

		# cd so that the file opens with the right relative path
		# subshell so that directory for the above logic remains standard
		(cd "$foldername" && $openy "$filename")
		log+=("$absolutepath")
	fi

done

# return success
exit 0
